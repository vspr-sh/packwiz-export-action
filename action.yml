name: packwiz export
description: Automates the export of a packwiz-based modpack for supported platforms and launchers.

inputs:

  modrinth:
    description: Export the modpack as a `.mrpack` file for Modrinth.
    required: false
    default: true

  curseforge: 
    description: Export the modpack as a `.zip` file for CurseForge.
    required: false
    default: true

  autoupdate:
    description: Generate an automatically updating instance for MultiMC and/or Prism Launcher. If you want to use this, just pass a URL for the bootstrapper.
    required: false
    default: ''

  autoupdate-bootstrap-url:
    description: Where to download the bootstrap jar from, useful if you want to use a custom bootstrap jar.
    required: false
    default: 'https://github.com/packwiz/packwiz-installer-bootstrap/releases/latest/download/packwiz-installer-bootstrap.jar'

  # autoupdate-use-github-pages:
  #   description: Host packwiz metadata files on GitHub Pages.
  #   required: false
  #   default: false

  # github_token:
  #   description: GITHUB_TOKEN
  #   default: "${{ github.token }}"

outputs:
  file-list:
    description: A list of path's to the generated files.

runs:
  using: composite
  steps:
    - uses: vspr-sh/packwiz-setup-action@master
        
    - shell: bash
      run: sudo apt-get install -yqq yq zip wget

    - id: metadata
      shell: bash
      run: |
        PACK_NAME=$(tomlq -r '.name' pack.toml)
        PACK_VERSION=$(tomlq -r '.version' pack.toml)
        MC_VERSION=$(tomlq -r '.versions.minecraft' pack.toml)

        echo "pack_name=$PACK_NAME" >> "$GITHUB_OUTPUT"
        echo "pack_version=$PACK_VERSION" >> "$GITHUB_OUTPUT"
        echo "pack_minecraft_version=$MC_VERSION" >> "$GITHUB_OUTPUT"

        if tomlq -r '.versions.fabric' pack.toml; then
          echo "pack_loader_uid=net.fabricmc.fabric-loader" >> "$GITHUB_OUTPUT"
          echo "pack_loader_version=$(tomlq -r '.versions.fabric' pack.toml)" >> "$GITHUB_OUTPUT"
        elif tomlq -r '.versions.forge' pack.toml; then
          echo "pack_loader_uid=net.minecraftforge" >> "$GITHUB_OUTPUT"
          echo "pack_loader_version=$(tomlq -r '.versions.forge' pack.toml)" >> "$GITHUB_OUTPUT"
        elif tomlq -r '.versions.neoforge' pack.toml; then
          echo "pack_loader_uid=net.neoforged" >> "$GITHUB_OUTPUT"
          echo "pack_loader_version=$(tomlq -r '.versions.neoforged' pack.toml)" >> "$GITHUB_OUTPUT"
        elif tomlq -r '.versions.quilt' pack.toml; then
          echo "pack_loader_uid=org.quiltmc.quilt-loader" >> "$GITHUB_OUTPUT"
          echo "pack_loader_version=$(tomlq -r '.versions.quilt' pack.toml)" >> "$GITHUB_OUTPUT"
        fi

    - run: mkdir -pv export
      shell: bash

    - if: ${{ inputs.modrinth == 'true' }}
      shell: bash
      run: packwiz modrinth export --output=export/${PACK_NAME}-Modrinth-${PACK_VERSION}.zip
      env:
        PACK_NAME: ${{ steps.metadata.outputs.pack_name }}
        PACK_VERSION: ${{ steps.metadata.outputs.pack_version }}


    - if: ${{ inputs.curseforge == 'true' }}
      shell: bash
      run: packwiz curseforge export --output=export/${PACK_NAME}-CurseForge-${PACK_VERSION}.zip
      env:
        PACK_NAME: ${{ steps.metadata.outputs.pack_name }}
        PACK_VERSION: ${{ steps.metadata.outputs.pack_version }}

    # we need this to be able to obtain the template files
    # TODO: Find a better way to deal with this
    - if: ${{ inputs.autoupdate != '' }}
      uses: actions/checkout@v4
      with:
        repository: vspr-sh/packwiz-export-action
        path: packwiz-export-action

    - if: ${{ inputs.autoupdate != '' }}
      shell: bash
      env:
        INSTANCE_PACK_NAME: ${{ steps.metadata.outputs.pack_name }}
        INSTANCE_PACK_VERSION: ${{ steps.metadata.outputs.pack_version }}
        INSTANCE_PACK_GAME_VERSION: ${{ steps.metadata.outputs.pack_minecraft_version }}
        INSTANCE_PACK_LOADER_UID: ${{ steps.metadata.outputs.pack_loader_uid }}
        INSTANCE_PACK_LOADER_VERSION: ${{ steps.metadata.outputs.pack_loader_version }}
        INSTANCE_BOOTSTRAP_UPDATE_URL: ${{ inputs.autoupdate }}
        INSTANCE_BOOTSTRAP_DOWNLOAD_URL: ${{ inputs.autoupdate-bootstrap-url }}
      run: |
        if [[ -z "${{ inputs.autoupdate-url }}" && "${{ inputs.autoupdate-use-github-pages }}" != 'true' ]]; then
          echo "Error: Either 'autoupdate-url' or 'autoupdate-use-github-pages' must be set."
          exit 1
        fi
        
        mkdir -p work/minecraft/ && cd work
        touch .packignore
        INST_JAVA='$INST_JAVA' # envsubst moment
        envsubst < ../packwiz-export-action/instance.cfg > instance.cfg
        envsubst < ../packwiz-export-action/mmc-pack.json > mmc-pack.json
        wget --output-document=minecraft/bootstrap.jar "$INSTANCE_BOOTSTRAP_DOWNLOAD_URL"

        zip ../export/${INSTANCE_PACK_NAME}.zip .packignore mmc-pack.json instance.cfg minecraft/bootstrap.jar

        cd ..
        FILE_LIST=$(find export/ -type f)
        echo "file_list=$FILE_LIST" >> "$GITHUB_OUTPUT"
        echo "Generated files: $FILE_LIST"
